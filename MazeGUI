import java.awt.EventQueue;

import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JMenu;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import java.awt.GridLayout;
import javax.swing.SwingConstants;
import java.awt.Color;
import java.awt.Component;

public class MazeGUI {

	private JFrame frame;
	JFileChooser fileChooser = new JFileChooser();
	private MazeLogic maze = new MazeLogic();
	JPanel gridPanel = null;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MazeGUI window = new MazeGUI();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public MazeGUI() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 1500, 900);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		final JFileChooser fc = new JFileChooser();
		
		JMenuBar menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		
		JMenu mnNewMenu = new JMenu("File");
		menuBar.add(mnNewMenu);
		
		JMenuItem mntmNewMenuItem = new JMenuItem("Load");
		mntmNewMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int returnVal = fc.showOpenDialog(frame);
				if(returnVal == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					try {
						maze.loadMaze(file);
						char[][] grid = maze.getGrid();
						displayGrid(grid);
					}catch(FileNotFoundException Exception){
						JOptionPane.showMessageDialog(frame,  "File not found.");
					}catch(ErrorInputException except) {
						JOptionPane.showMessageDialog(frame, "The content in the file is in incorrect form.");
					}
				}
				
			}

			

			
		});
		mnNewMenu.add(mntmNewMenuItem);
		
		JMenuItem mntmNewMenuItem_3 = new JMenuItem("Generate Random Maze");
		mntmNewMenuItem_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				maze.generateRandomMaze();
				char[][] grid = maze.getGrid();
				displayGrid(grid);
			}

			

			private void generateRandomMaze() {
				// TODO Auto-generated method stub
				
			}
		});
		mnNewMenu.add(mntmNewMenuItem_3);
		
		JMenu mnNewMenu_1 = new JMenu("Run");
		menuBar.add(mnNewMenu_1);
		
		JMenuItem mntmNewMenuItem_1 = new JMenuItem("Find Path");
		mntmNewMenuItem_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ArrayList<Path> paths = maze.pathFinder();
				displayPaths(paths);
			}

			private void displayPaths(ArrayList<Path> paths) {
				// TODO Auto-generated method stub
				throw new Exception("Not implemented.");
			}
		});
		mnNewMenu_1.add(mntmNewMenuItem_1);
		
		JMenuItem mntmNewMenuItem_2 = new JMenuItem("Clear");
		mntmNewMenuItem_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		mnNewMenu_1.add(mntmNewMenuItem_2);
		
		JLabel lblNewLabel = new JLabel("Message");
		
		frame.getContentPane().add(lblNewLabel, BorderLayout.SOUTH);
		
		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.CENTER);
		panel.setLayout(new GridLayout(0, 10, 0, 0));
		for(int i=0;i<400;i++) {
			JLabel lblNewLabel_1 = new JLabel("B");
			lblNewLabel_1.setOpaque(true);
			lblNewLabel_1.setBackground(Color.darkGray);
			lblNewLabel_1.setForeground(Color.WHITE);
			lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
			lblNewLabel_1.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			panel.add(lblNewLabel_1);
		}
		gridPanel = panel;
	}
	private void displayGrid(char[][] grid) {
		gridPanel.removeAll();
		gridPanel.setLayout(new GridLayout(grid.length,grid[0].length,0,0));
		for(int i=0;i<grid.length;i++) {
			for(int j=0;j<grid[0].length;j++) {
				char c = grid[i][j];
				JLabel label = new JLabel(""+c);
				label.setHorizontalAlignment(SwingConstants.CENTER);
				label.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				label.setOpaque(true);
				switch(c) {
				case 'B':
					label.setForeground(Color.white);
					label.setBackground(Color.darkGray);
					break;
				case 'O':
					label.setForeground(Color.black);
					label.setBackground(Color.yellow);
					break;
				case 'S':
					label.setForeground(Color.white);
					label.setBackground(Color.red);
					break;
				case 'X':
					label.setForeground(Color.black);
					label.setForeground(Color.green);
				}
				gridPanel.add(label);
			}
		}
		gridPanel.revalidate();
	}

}
